package world_data;

import java.awt.HeadlessException;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.TreeMap;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import xml_utilities.InvalidXMLFileFormatException;
import xml_utilities.XMLUtilities;

/**
 *  ?
 * 
 *  @author Richard McKenna
 *          Debugging Enterprises
 *          Version 1.0
 */
public class WorldDataManager 
{
    // THIS IS WHERE WE'LL STORE ALL OF OUR DATA
    private TreeMap<String, Region> allRegions;
    
    // THERE SHOULD ONLY BE ONE WORLD NODE
    private Region world;
    

    /**
     * Default constructor, it will initialize all necessary data structures
     * such that xml files may be loaded.
     */
    public WorldDataManager()
    {
        // INIT WHERE WE'LL PUT OUR DATA
        allRegions = new TreeMap();
        
        // INIT THE CLASS DOING THE FILE I/O
       // THIS WILL HELP US LOAD STUFF
       xmlUtil = new XMLUtilities();
    }
    
    public boolean hasRegion(Region testRegion)
    {
        return (allRegions.containsKey(testRegion.getId()));
    }

    public void setRoot(Region initRoot)
    {
        allRegions.put(initRoot.getId(), initRoot);
        world = initRoot;
    }
    
    public LinkedList<Region> getPathFromRoot(Region region)
    {
        LinkedList<Region> path = new LinkedList();
        path.add(region);
        
        Region regionToAdd = region.getParentRegion();
        while (regionToAdd != null)
        {
            path.addFirst(regionToAdd);
            regionToAdd = regionToAdd.getParentRegion();
        }
        return path;
    }
    public LinkedList<Region> getPathToRoot(Region region)
    {
        LinkedList<Region> path = new LinkedList();
        path.add(region);
        
        Region regionToAdd = region.getParentRegion();
        while (regionToAdd != null)
        {
            path.addLast(regionToAdd);
            regionToAdd = regionToAdd.getParentRegion();
        }
        return path;
    }
    

    public void addRegion(Region regionToAdd)
    {
        allRegions.put(regionToAdd.getId(), regionToAdd);
    }
    
    /**
     * Accessor method for getting one of the regions in the current world.
     * 
     * @param regionToAdd 
     */
    public Region getRegion(String regionId)
    {
        return allRegions.get(regionId);
    }
    
    public Region getWorld()
    {
        return world;
    }

    
    
        public void reset(String worldName)
    {
        allRegions.clear();
        world = new Region(WORLD_ID, worldName, RegionType.WORLD);
        allRegions.put(WORLD_ID, world); 
    }
    
    public void removeRegion(Region regionToRemove)
    {
        allRegions.remove(regionToRemove.getId());
        Region parentOfRegionToRemove = regionToRemove.getParentRegion();
        if (parentOfRegionToRemove != null)
        {
            parentOfRegionToRemove.removeSubRegion(regionToRemove);
        }
    }
    
    
    
    
    
    
    // CONSTANTS FOR LOADING DATA FROM THE XML FILES
    public static final String WORLD_ID = "World";
    public static final String WORLD_REGIONS_NODE = "world_regions";
    public static final String REGIONS_LIST_NODE = "regions_list";
    public static final String REGIONS_MAPPINGS_NODE = "regions_mappings";
    public static final String REGION_NODE = "region";
    public static final String SUB_REGION_NODE = "sub_region";
    public static final String ID_ATTRIBUTE = "id";
    public static final String NAME_ATTRIBUTE = "name";
    public static final String TYPE_ATTRIBUTE = "type";
    public static final String CAPITAL_ATTRIBUTE = "capital";

    // FOR NICELY FORMATTED XML OUTPUT
    public static final String XML_INDENT_PROPERTY = "{http://xml.apache.org/xslt}indent-amount";
    public static final String XML_INDENT_VALUE = "5";
    public static final String YES_VALUE = "yes";
    
    
    // THIS WILL HELP US PARSE THE XML FILES
    private XMLUtilities xmlUtil;
    
    // THIS IS THE SCHEMA WE'LL USE
    private File worldSchema;
    
   public void setSchema(File initWorldSchema)
    {
        worldSchema = initWorldSchema;
    }
     
    
    /**
     * 
     *
     * @param path
     * @param regionsListFileName
     * @param regionsMappingsFileName
     * @throws InvalidXMLFileFormatException 
     */
    public void loadWorld(  File regionsFile)
            throws InvalidXMLFileFormatException, FileNotFoundException
    {
        // FIRST LOAD ALL THE XML INTO A TREE
        Document doc = xmlUtil.loadXMLDocument( regionsFile.getAbsolutePath(), 
                                                worldSchema.getAbsolutePath());

        // THEN LET'S LOAD THE LIST OF ALL THE REGIONS
        loadRegionsList(doc);
            
        // AND NOW CONNECT ALL THE REGIONS TO EACH OTHER
        loadRegionsMappings(doc);
    }
    
    private void loadRegionsList(Document doc)
    {
        // FIRST GET THE REGIONS LIST
        Node regionsListNode = doc.getElementsByTagName(REGIONS_LIST_NODE).item(0);
        
        // AND THEN GO THROUGH AND ADD ALL THE LISTED REGIONS
        ArrayList<Node> regionsList = xmlUtil.getChildNodesWithName(regionsListNode, REGION_NODE);
        for (int i = 0; i < regionsList.size(); i++)
        {
            Node regionNode = regionsList.get(i);
            NamedNodeMap regionAttributes = regionNode.getAttributes();
            String id = regionAttributes.getNamedItem(ID_ATTRIBUTE).getNodeValue();
            String name = regionAttributes.getNamedItem(NAME_ATTRIBUTE).getNodeValue();
            String type = regionAttributes.getNamedItem(TYPE_ATTRIBUTE).getNodeValue();
            RegionType regionType = RegionType.valueOf(type);
            
            Region regionToAdd;
            Node capitalNode = regionAttributes.getNamedItem(CAPITAL_ATTRIBUTE);
            if (capitalNode != null)
            {
                String capital = capitalNode.getNodeValue();
                regionToAdd = new Region(id, name, regionType, capital);
            }
            else
            {
                regionToAdd = new Region(id, name, regionType);
            }
            addRegion(regionToAdd);
            if (regionType == RegionType.WORLD)
            {
                world = regionToAdd;
            }
        }
    }
    
    private void loadRegionsMappings(Document doc)
    {      
        // NOW GET THE REGIONS MAPPINGS
        Node regionsMappingsNode = doc.getElementsByTagName(REGIONS_MAPPINGS_NODE).item(0);
        
        // AND THEN GET THE MAPPINGS
        ArrayList<Node> regionsMapped = xmlUtil.getChildNodesWithName(regionsMappingsNode, REGION_NODE);
        for (int i = 0; i < regionsMapped.size(); i++)
        {
            // AND THEN GET THEIR SUB REGIONS
            Node regionNode = regionsMapped.get(i);
            String regionID = regionNode.getAttributes().getNamedItem(ID_ATTRIBUTE).getNodeValue();
            Region region = getRegion(regionID);
            
            ArrayList<Node> subRegionNodes = xmlUtil.getChildNodesWithName(regionNode, SUB_REGION_NODE);
            int numSubRegions = subRegionNodes.size();
            for (int j = 0; j < numSubRegions; j++)
            {
                Node subRegionNode = subRegionNodes.get(j);
                NamedNodeMap subRegionAttributes = subRegionNode.getAttributes();
                Node subRegionIdNode = subRegionAttributes.getNamedItem(ID_ATTRIBUTE);
                String subRegionID = subRegionIdNode.getNodeValue();
                Region subRegion = getRegion(subRegionID);
                region.addSubRegion(subRegion);
                subRegion.setParentRegion(region);
            }
        }        
    }
    
   /**
     * This method saves the world currently being edited to the worldFile. Note
     * that it will be saved as an .xml file, which is an XML-format that will
     * conform to the WorldRegions.xsd schema.
     * 
     * @param worldFile The file to write the world to.
     * 
     * @return true if the file is successfully saved, false otherwise. It's
     * possible that another program could lock out ours from writing to it,
     * so we need to let the caller know when this happens.
     */
    public boolean saveWorld(File worldFile)
    {
        try 
        {
            // THESE WILL US BUILD A DOC
            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
            
            // FIRST MAKE THE DOCUMENT
            Document doc = docBuilder.newDocument();
            
            // THEN THE ROOT ELEMENT
            Element rootElement = doc.createElement(WORLD_REGIONS_NODE);
            doc.appendChild(rootElement);
 
            // THEN THE REGIONS LIST
            Element regionsListElement = makeElement(doc, rootElement, REGIONS_LIST_NODE, "");
            
            // AND LET'S ADD ALL THE REGIONS
            for (Region region : allRegions.values())
            {
                // MAKE A REGION NODE AND ADD IT TO THE LIST
                Element regionNodeElement = makeElement(doc, regionsListElement,
                        REGION_NODE, "");
                
                // NOW LET'S FILL IN THE REGION'S DATA. FIRST MAKE THE ATTRIBUTES
                doc.createAttribute(ID_ATTRIBUTE); 
                doc.createAttribute(NAME_ATTRIBUTE);
                doc.createAttribute(TYPE_ATTRIBUTE);
                doc.createAttribute(CAPITAL_ATTRIBUTE);
                regionNodeElement.setAttribute(ID_ATTRIBUTE, region.getId());
                regionNodeElement.setAttribute(NAME_ATTRIBUTE, region.getName());
                regionNodeElement.setAttribute(TYPE_ATTRIBUTE, region.getType().toString());
                if (region.hasCapital())
                {
                    regionNodeElement.setAttribute(CAPITAL_ATTRIBUTE, region.getCapital());
                }   
             }

            // AND NOW ADD ALL THE CONNECTIONS
            Element regionsMappingsElement = makeElement(doc, rootElement, REGIONS_MAPPINGS_NODE, "");
            for (Region region: allRegions.values())
            {
                // MAKE A REGION NODE AND ADD IT TO THE LIST
                Element regionNodeElement = makeElement(doc, regionsMappingsElement, REGION_NODE, "");
                regionNodeElement.setAttribute(ID_ATTRIBUTE, region.getId());
                
                Iterator<Region> subRegionsIt = region.getSubRegions();
                while (subRegionsIt.hasNext())
                {
                    Region subRegion = subRegionsIt.next();
                    Element subRegionNodeElement = makeElement(doc, regionNodeElement, SUB_REGION_NODE, "");
                    subRegionNodeElement.setAttribute(ID_ATTRIBUTE, subRegion.getId());
                }
            }

            // THE TRANSFORMER KNOWS HOW TO WRITE A DOC TO
            // An XML FORMATTED FILE, SO LET'S MAKE ONE
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            transformer.setOutputProperty(OutputKeys.INDENT, YES_VALUE);
            transformer.setOutputProperty(XML_INDENT_PROPERTY, XML_INDENT_VALUE);
            DOMSource source = new DOMSource(doc);
            StreamResult result = new StreamResult(worldFile);
            
            // SAVE THE POSE TO AN XML FILE
            transformer.transform(source, result);    
            
            return true;
        }
        catch(TransformerException | ParserConfigurationException | DOMException | HeadlessException ex)
        {
            return false;
        }    
    }   
    
    /**
     * This helper method builds elements (nodes) for us to help with building
     * a Doc which we would then save to a file.
     * 
     * @param doc The document we're building.
     * 
     * @param parent The node we'll add our new node to.
     * 
     * @param elementName The name of the node we're making.
     * 
     * @param textContent The data associated with the node we're making.
     * 
     * @return A node of name elementName, with textComponent as data, in the doc
     * document, with parent as its parent node.
     */
    private Element makeElement(Document doc, Element parent, String elementName, String textContent)
    {
        Element element = doc.createElement(elementName);
        element.setTextContent(textContent);
        parent.appendChild(element);
        return element;
    }    
    

}